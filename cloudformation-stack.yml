# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Cognito.html

---
Parameters:
  TestingUrl:
    Default: "http://localhost:8080"
    Description: "URL you're testing this playground from"
    Type: String

Outputs:
  UserPoolProviderUrl:
    Value: !GetAtt UserPool.ProviderURL
  BackendApiInvokeUrl:
    Value: !Sub "${BackendApi.ApiEndpoint}/${BackendApiStage}"

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  UserPoolWebLoginClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Ref TestingUrl
      EnableTokenRevocation: false
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId:
        Ref: UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: pmw-playground
      UserPoolId:
        Ref: UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: false
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolWebLoginClient
          ProviderName: !GetAtt UserPool.ProviderName

  AuthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
      Policies:
        # Allow each visitor to update their visit count
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt VisitorCountDdbTable.Arn
                Condition:
                  "ForAllValues:StringEquals":
                    "dynamodb:LeadingKeys":
                      - "${cognito-identity.amazonaws.com:sub}"
          PolicyName: AllowCounterTable
        - PolicyDocument:
            # For a Cognito-authenticated user to invoke an API Gateway route protected by AWS_IAM
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:*:${BackendApi}/*"
          PolicyName: AllowApiGatewayInvoke

  UnauthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedUserRole.Arn
        unauthenticated: !GetAtt UnauthenticatedUserRole.Arn
      RoleMappings:
        myUserPool:
          IdentityProvider: !Sub "${UserPool.ProviderName}:${UserPoolWebLoginClient}"
          AmbiguousRoleResolution: AuthenticatedRole
          Type: Token

  VisitorCountDdbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ###########################
  # The following are backend resources.
  # They are intended as a proof-of-concept that we can
  # authenticate and authorize API calls using Cognito.
  ###########################

  BackendApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - OPTIONS
        AllowOrigins:
          - !Ref TestingUrl
      Name: cognito-playground-api
      ProtocolType: HTTP

  BackendApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BackendApi
      AutoDeploy: true
      StageName: prod

  BackendApiCognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - !Ref UserPoolWebLoginClient
        Issuer: !GetAtt UserPool.ProviderURL
      Name: Cognito

  # start: shared resources between JWT and IAM Lambda functions
  BackendLambdaFnRootExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      # No policies
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  # end: shared resources between JWT and IAM Lambda functions

  # start: JWT route Lambda function and API Gateway integration
  BackendLambdaFnJwt:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              "headers": {},
              "isBase64Encoded": false,
              "statusCode": 200,
              "body": "JWT Lambda fn has this request context: " + JSON.stringify(event.requestContext),
            };
          }
      Handler: index.handler
      Role: !GetAtt BackendLambdaFnRootExecutionRole.Arn
      Runtime: nodejs14.x

  BackendApiLambdaJwtIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt BackendLambdaFnJwt.Arn
          - '/invocations'
      IntegrationMethod: POST
      PayloadFormatVersion: 2.0

  BackendLambdaPermissionJwt:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref BackendLambdaFnJwt
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*/jwt"

  BackendApiRouteGetJwt:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizationType: JWT
      AuthorizerId: !Ref BackendApiCognitoAuthorizer
      RouteKey: 'GET /jwt'
      Target: !Join
        - /
        - - integrations
          - !Ref BackendApiLambdaJwtIntegration
  # end: JWT route Lambda function and API Gateway integration

  # start: IAM route Lambda function and API Gateway integration
  BackendLambdaFnIam:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              "headers": {},
              "isBase64Encoded": false,
              "statusCode": 200,
              "body": "IAM Lambda fn has this request context: " + JSON.stringify(event.requestContext),
            };
          }
      Handler: index.handler
      Role: !GetAtt BackendLambdaFnRootExecutionRole.Arn
      Runtime: nodejs14.x

  BackendApiLambdaIamIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt BackendLambdaFnIam.Arn
          - '/invocations'
      IntegrationMethod: POST
      PayloadFormatVersion: 2.0

  BackendLambdaPermissionIam:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref BackendLambdaFnIam
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*/iam"

  BackendApiRouteGetIam:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizationType: AWS_IAM
      RouteKey: 'GET /iam'
      Target: !Join
        - /
        - - integrations
          - !Ref BackendApiLambdaIamIntegration
  # end: IAM route Lambda function and API Gateway integration
